function create_geometry_18(scene)
{
      var mesh;
      var material;
      var geometry;
         geometry = new THREE.BufferGeometry();
         geometry.attributes = {
         position: {
            itemSize: 3,
            array: new Float32Array([
            577.539, 6264.677, -6503.188,
            549.094, 6273.245, -6533.640,
            566.161, 6278.385, -6551.910,
            566.161, 6278.385, -6551.910,
            549.094, 6273.245, -6533.640,
            -321.352, 6278.385, -6551.910,
            549.094, 6273.245, -6533.640,
            -304.284, 6273.245, -6533.640,
            -321.352, 6278.385, -6551.910,
            -321.352, 6278.385, -6551.910,
            -304.284, 6273.245, -6533.640,
            -349.798, 6269.815, -6521.459,
            -304.284, 6273.245, -6533.640,
            -332.730, 6264.677, -6503.189,
            -349.798, 6269.815, -6521.459,
            -349.798, 6269.815, -6521.459,
            -332.730, 6264.677, -6503.189,
            -349.798, 6172.752, -6176.459,
            -332.730, 6264.677, -6503.189,
            -332.730, 6177.895, -6194.730,
            -349.798, 6172.752, -6176.459,
            -349.798, 6172.752, -6176.459,
            -332.730, 6177.895, -6194.730,
            -321.352, 6164.187, -6146.008,
            -332.730, 6177.895, -6194.730,
            -304.284, 6169.327, -6164.279,
            -321.352, 6164.187, -6146.008,
            -321.352, 6164.187, -6146.008,
            -304.284, 6169.327, -6164.279,
            566.161, 6164.187, -6146.008,
            -304.284, 6169.327, -6164.279,
            549.094, 6169.327, -6164.279,
            566.161, 6164.187, -6146.008,
            566.161, 6164.187, -6146.008,
            549.094, 6169.327, -6164.279,
            594.607, 6172.754, -6176.460,
            549.094, 6169.327, -6164.279,
            577.539, 6177.895, -6194.730,
            594.607, 6172.754, -6176.460,
            594.607, 6172.754, -6176.460,
            577.539, 6177.895, -6194.730,
            594.607, 6269.818, -6521.459,
            577.539, 6177.895, -6194.730,
            577.539, 6264.677, -6503.188,
            594.607, 6269.818, -6521.459,
            594.607, 6269.818, -6521.459,
            577.539, 6264.677, -6503.188,
            566.161, 6278.385, -6551.910,
            594.607, 6342.770, -6190.646,
            566.161, 6334.203, -6160.194,
            566.161, 6164.187, -6146.008,
            594.607, 6342.770, -6190.646,
            566.161, 6164.187, -6146.008,
            594.607, 6172.754, -6176.460,
            594.607, 6269.818, -6521.459,
            566.161, 6448.401, -6566.097,
            594.607, 6439.834, -6535.645,
            566.161, 6278.385, -6551.910,
            566.161, 6448.401, -6566.097,
            594.607, 6269.818, -6521.459,
            594.607, 6269.818, -6521.459,
            594.607, 6439.834, -6535.645,
            594.607, 6342.770, -6190.646,
            594.607, 6269.818, -6521.459,
            594.607, 6342.770, -6190.646,
            594.607, 6172.754, -6176.460,
            -349.798, 6342.771, -6190.646,
            -321.352, 6164.187, -6146.008,
            -321.352, 6334.203, -6160.195,
            -349.798, 6342.771, -6190.646,
            -349.798, 6172.752, -6176.459,
            -321.352, 6164.187, -6146.008,
            -349.798, 6439.834, -6535.645,
            -349.798, 6269.815, -6521.459,
            -349.798, 6172.752, -6176.459,
            -349.798, 6439.834, -6535.645,
            -349.798, 6172.752, -6176.459,
            -349.798, 6342.771, -6190.646,
            -321.352, 6448.401, -6566.097,
            -349.798, 6269.815, -6521.459,
            -349.798, 6439.834, -6535.645,
            -349.798, 6269.815, -6521.459,
            -321.352, 6448.401, -6566.097,
            -321.352, 6278.385, -6551.910,
            566.161, 6278.385, -6551.910,
            -321.352, 6278.385, -6551.910,
            -321.352, 6448.401, -6566.097,
            -321.352, 6448.401, -6566.097,
            566.161, 6448.401, -6566.097,
            566.161, 6278.385, -6551.910,
            566.161, 6164.187, -6146.008,
            566.161, 6334.203, -6160.194,
            -321.352, 6164.187, -6146.008,
            566.161, 6334.203, -6160.194,
            -321.352, 6334.203, -6160.195,
               -321.352, 6164.187, -6146.008
            ])
         },
         normal: {
            itemSize: 3,
            array: new Float32Array([
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, -0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, -0.000,
            0.000, -1.000, -0.000,
            0.000, -1.000, -0.000,
            0.000, -1.000, -0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, -0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, -0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, -0.000,
            0.000, -1.000, -0.000,
            0.000, -1.000, -0.000,
            0.000, -1.000, -0.000,
            0.000, -1.000, -0.000,
            0.000, -1.000, -0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, -0.000,
            0.000, -1.000, -0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.733, 0.000, 0.680,
            0.733, 0.000, 0.680,
            0.733, 0.000, 0.680,
            0.733, 0.000, 0.680,
            0.733, 0.000, 0.680,
            0.733, 0.000, 0.680,
            0.733, -0.000, -0.680,
            0.733, -0.000, -0.680,
            0.733, -0.000, -0.680,
            0.733, -0.000, -0.680,
            0.733, -0.000, -0.680,
            0.733, -0.000, -0.680,
            1.000, 0.000, 0.000,
            1.000, 0.000, 0.000,
            1.000, 0.000, 0.000,
            1.000, 0.000, 0.000,
            1.000, 0.000, 0.000,
            1.000, 0.000, 0.000,
            -0.733, 0.000, 0.680,
            -0.733, 0.000, 0.680,
            -0.733, 0.000, 0.680,
            -0.733, 0.000, 0.680,
            -0.733, 0.000, 0.680,
            -0.733, 0.000, 0.680,
            -1.000, 0.000, 0.000,
            -1.000, 0.000, 0.000,
            -1.000, 0.000, 0.000,
            -1.000, 0.000, 0.000,
            -1.000, 0.000, 0.000,
            -1.000, 0.000, 0.000,
            -0.733, -0.000, -0.680,
            -0.733, -0.000, -0.680,
            -0.733, -0.000, -0.680,
            -0.733, -0.000, -0.680,
            -0.733, -0.000, -0.680,
            -0.733, -0.000, -0.680,
            0.000, -0.000, -1.000,
            0.000, -0.000, -1.000,
            0.000, -0.000, -1.000,
            0.000, -0.000, -1.000,
            0.000, -0.000, -1.000,
            0.000, -0.000, -1.000,
            0.000, 0.000, 1.000,
            -0.000, 0.000, 1.000,
            -0.000, 0.000, 1.000,
            -0.000, 0.000, 1.000,
            -0.000, 0.000, 1.000,
               -0.000, 0.000, 1.000
            ])
         },
         uv: {
            itemSize: 2,
            array: new Float32Array([
               1.000, 0.083,
               1.000, 0.000,
               0.969, 0.999,
               0.969, 0.999,
               1.000, 0.000,
               0.031, 0.999,
               1.000, 0.000,
               1.000, 0.000,
               0.031, 0.999,
               0.031, 0.999,
               1.000, 0.000,
               0.000, 0.999,
               1.000, 0.000,
               1.000, 0.083,
               0.000, 0.999,
               0.000, 0.999,
               1.000, 0.083,
               0.999, 0.925,
               1.000, 0.083,
               1.000, 0.917,
               0.999, 0.925,
               0.999, 0.925,
               1.000, 0.917,
               0.969, 0.999,
               1.000, 0.917,
               1.000, 1.000,
               0.969, 0.999,
               0.969, 0.999,
               1.000, 1.000,
               0.031, 0.999,
               1.000, 1.000,
               1.000, 1.000,
               0.031, 0.999,
               0.031, 0.999,
               1.000, 1.000,
               0.001, 0.925,
               1.000, 1.000,
               1.000, 0.917,
               0.001, 0.925,
               0.001, 0.925,
               1.000, 0.917,
               0.001, 0.075,
               1.000, 0.917,
               1.000, 0.083,
               0.001, 0.075,
               0.001, 0.075,
               1.000, 0.083,
               0.969, 0.999,
               0.142, 0.925,
               0.031, 0.858,
               0.031, 0.999,
               0.142, 0.925,
               0.031, 0.999,
               0.001, 0.925,
               0.001, 0.075,
               0.969, 0.858,
               0.142, 0.075,
               0.969, 0.999,
               0.969, 0.858,
               0.001, 0.075,
               0.001, 0.075,
               0.142, 0.075,
               0.142, 0.925,
               0.001, 0.075,
               0.142, 0.925,
               0.001, 0.925,
               0.858, 0.925,
               0.969, 0.999,
               0.969, 0.858,
               0.858, 0.925,
               0.999, 0.925,
               0.969, 0.999,
               0.000, 0.858,
               0.000, 0.999,
               0.999, 0.925,
               0.000, 0.858,
               0.999, 0.925,
               0.858, 0.925,
               0.031, 0.858,
               0.000, 0.999,
               0.000, 0.858,
               0.000, 0.999,
               0.031, 0.858,
               0.031, 0.999,
               0.969, 0.999,
               0.031, 0.999,
               0.031, 0.858,
               0.031, 0.858,
               0.969, 0.858,
               0.969, 0.999,
               0.031, 0.999,
               0.031, 0.858,
               0.969, 0.999,
               0.031, 0.858,
               0.969, 0.858,
               0.969, 0.999
            ])
         }
         };

         material = new THREE.MeshBasicMaterial({
            side: THREE.FrontSide,
            map: THREE.ImageUtils.loadTexture('data_ROST03.jpg')
            });
         mesh = new THREE.Mesh(geometry, material);
         scene.add(mesh);

         geometry = new THREE.BufferGeometry();
         geometry.attributes = {
         position: {
            itemSize: 3,
            array: new Float32Array([
            549.094, 6169.327, -6164.279,
            577.528, 6347.911, -6208.917,
            577.539, 6177.895, -6194.730,
            549.094, 6169.327, -6164.279,
            549.082, 6339.343, -6178.465,
            577.528, 6347.911, -6208.917,
            549.083, 6442.812, -6546.229,
            577.539, 6264.677, -6503.188,
            577.528, 6434.244, -6515.777,
            549.094, 6273.245, -6533.640,
            577.539, 6264.677, -6503.188,
            549.083, 6442.812, -6546.229,
            -304.295, 6339.343, -6178.465,
            549.094, 6169.327, -6164.279,
            -304.284, 6169.327, -6164.279,
            -304.295, 6339.343, -6178.465,
            549.082, 6339.343, -6178.465,
            549.094, 6169.327, -6164.279,
            -332.730, 6177.895, -6194.730,
            -304.295, 6339.343, -6178.465,
            -304.284, 6169.327, -6164.279,
            -332.730, 6177.895, -6194.730,
            -332.741, 6347.911, -6208.917,
            -304.295, 6339.343, -6178.465,
            -332.741, 6434.244, -6515.777,
            -304.284, 6273.245, -6533.640,
            -304.295, 6442.812, -6546.229,
            -304.284, 6273.245, -6533.640,
            -332.741, 6434.244, -6515.777,
            -332.730, 6264.677, -6503.189,
            549.083, 6442.812, -6546.229,
            -304.295, 6442.812, -6546.229,
            -304.284, 6273.245, -6533.640,
            -304.284, 6273.245, -6533.640,
            549.094, 6273.245, -6533.640,
            549.083, 6442.812, -6546.229,
            -332.741, 6347.911, -6208.917,
            -332.730, 6177.895, -6194.730,
            -332.730, 6264.677, -6503.189,
            -332.741, 6347.911, -6208.917,
            -332.730, 6264.677, -6503.189,
            -332.741, 6434.244, -6515.777,
            577.539, 6177.895, -6194.730,
            577.528, 6347.911, -6208.917,
            577.528, 6434.244, -6515.777,
            577.539, 6177.895, -6194.730,
            577.528, 6434.244, -6515.777,
               577.539, 6264.677, -6503.188
            ])
         },
         normal: {
            itemSize: 3,
            array: new Float32Array([
            -0.733, -0.000, -0.680,
            -0.733, -0.000, -0.680,
            -0.733, -0.000, -0.680,
            -0.733, -0.000, -0.680,
            -0.733, -0.000, -0.680,
            -0.733, -0.000, -0.680,
            -0.733, -0.004, 0.680,
            -0.733, -0.007, 0.680,
            -0.733, -0.004, 0.680,
            -0.733, -0.007, 0.680,
            -0.733, -0.007, 0.680,
            -0.733, -0.004, 0.680,
            0.000, -0.000, -1.000,
            0.000, -0.000, -1.000,
            0.000, -0.000, -1.000,
            0.000, -0.000, -1.000,
            0.000, -0.000, -1.000,
            0.000, -0.000, -1.000,
            0.733, 0.000, -0.680,
            0.733, 0.000, -0.680,
            0.733, 0.000, -0.680,
            0.733, 0.000, -0.680,
            0.733, 0.000, -0.680,
            0.733, 0.000, -0.680,
            0.733, -0.004, 0.680,
            0.733, -0.007, 0.680,
            0.733, -0.004, 0.680,
            0.733, -0.007, 0.680,
            0.733, -0.004, 0.680,
            0.733, -0.007, 0.680,
            0.000, -0.006, 1.000,
            0.000, -0.006, 1.000,
            0.000, -0.010, 1.000,
            0.000, -0.010, 1.000,
            0.000, -0.010, 1.000,
            0.000, -0.006, 1.000,
            1.000, 0.000, -0.000,
            1.000, 0.000, -0.000,
            1.000, 0.000, -0.000,
            1.000, 0.000, 0.000,
            1.000, 0.000, 0.000,
            1.000, 0.000, -0.000,
            -1.000, -0.000, -0.000,
            -1.000, -0.000, -0.000,
            -1.000, -0.000, -0.000,
            -1.000, -0.000, -0.000,
            -1.000, -0.000, -0.000,
               -1.000, -0.000, -0.000
            ])
         }
         };

         material = new THREE.MeshPhongMaterial({
            color: 0x2205FF,
            shininess: 1.072,
            ambient: 0x191919,
            side: THREE.FrontSide,
            specular: 0xE5E5E5
            });
         mesh = new THREE.Mesh(geometry, material);
         scene.add(mesh);

         geometry = new THREE.BufferGeometry();
         geometry.attributes = {
         position: {
            itemSize: 3,
            array: new Float32Array([
            -304.285, 7474.552, -6630.746,
            -304.295, 6442.812, -6546.229,
            549.083, 6442.812, -6546.229,
            549.093, 7474.552, -6630.747,
            -304.285, 7474.552, -6630.746,
               549.083, 6442.812, -6546.229
            ])
         },
         normal: {
            itemSize: 3,
            array: new Float32Array([
            0.000, -0.002, 1.000,
            0.000, -0.006, 1.000,
            0.000, -0.006, 1.000,
            0.000, -0.002, 1.000,
            0.000, -0.002, 1.000,
               0.000, -0.006, 1.000
            ])
         },
         uv: {
            itemSize: 2,
            array: new Float32Array([
               0.049, 0.053,
               0.951, 0.858,
               0.049, 0.858,
               0.951, 0.053,
               0.049, 0.053,
               0.049, 0.858
            ])
         }
         };

         material = new THREE.MeshBasicMaterial({
            side: THREE.FrontSide,
            map: THREE.ImageUtils.loadTexture('data_HANGARBU.jpg')
            });
         mesh = new THREE.Mesh(geometry, material);
         scene.add(mesh);

         geometry = new THREE.BufferGeometry();
         geometry.attributes = {
         position: {
            itemSize: 3,
            array: new Float32Array([
            -304.285, 7371.533, -6264.580,
            -304.295, 6339.343, -6178.465,
            -332.741, 6347.911, -6208.917,
            -332.741, 6347.911, -6208.917,
            -332.731, 7380.101, -6295.031,
            -304.285, 7371.533, -6264.580,
            577.539, 7380.101, -6295.031,
            577.528, 6347.911, -6208.917,
            549.093, 7371.533, -6264.580,
            549.093, 7371.533, -6264.580,
            577.528, 6347.911, -6208.917,
            549.082, 6339.343, -6178.465,
            -304.285, 7371.533, -6264.580,
            -332.731, 7380.101, -6295.031,
            577.539, 7380.101, -6295.031,
            577.539, 7380.101, -6295.031,
            549.093, 7371.533, -6264.580,
            -304.285, 7371.533, -6264.580,
            -304.285, 7474.552, -6630.746,
            -332.741, 6434.244, -6515.777,
            -304.295, 6442.812, -6546.229,
            -332.741, 6434.244, -6515.777,
            -304.285, 7474.552, -6630.746,
            -332.731, 7466.434, -6601.892,
            577.539, 7466.434, -6601.892,
            549.093, 7474.552, -6630.747,
            577.528, 6434.244, -6515.777,
            549.093, 7474.552, -6630.747,
            549.083, 6442.812, -6546.229,
            577.528, 6434.244, -6515.777,
            -304.285, 7474.552, -6630.746,
            577.539, 7466.434, -6601.892,
            -332.731, 7466.434, -6601.892,
            577.539, 7466.434, -6601.892,
            -304.285, 7474.552, -6630.746,
               549.093, 7474.552, -6630.747
            ])
         },
         normal: {
            itemSize: 3,
            array: new Float32Array([
            0.733, -0.000, -0.680,
            0.733, 0.000, -0.680,
            0.733, 0.000, -0.680,
            0.733, 0.000, -0.680,
            0.733, -0.000, -0.680,
            0.733, -0.000, -0.680,
            -0.733, 0.000, -0.680,
            -0.733, -0.000, -0.680,
            -0.733, 0.000, -0.680,
            -0.733, 0.000, -0.680,
            -0.733, -0.000, -0.680,
            -0.733, -0.000, -0.680,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.715, -0.000, 0.699,
            0.733, -0.004, 0.680,
            0.733, -0.004, 0.680,
            0.733, -0.004, 0.680,
            0.715, -0.000, 0.699,
            0.714, -0.000, 0.700,
            -0.714, 0.000, 0.700,
            -0.715, -0.000, 0.699,
            -0.733, -0.004, 0.680,
            -0.715, -0.000, 0.699,
            -0.733, -0.004, 0.680,
            -0.733, -0.004, 0.680,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
               0.000, -1.000, 0.000
            ])
         }
         };

         material = new THREE.MeshPhongMaterial({
            color: 0xFCFF00,
            shininess: 1.072,
            ambient: 0x191919,
            side: THREE.FrontSide,
            specular: 0xE5E5E5
            });
         mesh = new THREE.Mesh(geometry, material);
         scene.add(mesh);

         geometry = new THREE.BufferGeometry();
         geometry.attributes = {
         position: {
            itemSize: 3,
            array: new Float32Array([
            -332.731, 7380.101, -6295.031,
            577.539, 7466.434, -6601.892,
            577.539, 7380.101, -6295.031,
            577.539, 7466.434, -6601.892,
            -332.731, 7380.101, -6295.031,
            -332.731, 7466.434, -6601.892,
            -332.731, 7380.101, -6295.031,
            -332.741, 6347.911, -6208.917,
            -332.741, 6434.244, -6515.777,
            -332.731, 7380.101, -6295.031,
            -332.741, 6434.244, -6515.777,
            -332.731, 7466.434, -6601.892,
            577.539, 7380.101, -6295.031,
            577.539, 7466.434, -6601.892,
            577.528, 6434.244, -6515.777,
            577.539, 7380.101, -6295.031,
            577.528, 6434.244, -6515.777,
               577.528, 6347.911, -6208.917
            ])
         },
         normal: {
            itemSize: 3,
            array: new Float32Array([
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            0.000, -1.000, 0.000,
            1.000, -0.000, 0.000,
            1.000, -0.000, 0.000,
            1.000, -0.000, 0.000,
            1.000, -0.000, -0.000,
            1.000, -0.000, -0.000,
            1.000, -0.000, -0.000,
            -1.000, 0.000, 0.000,
            -1.000, 0.000, 0.000,
            -1.000, 0.000, 0.000,
            -1.000, 0.000, -0.000,
            -1.000, 0.000, -0.000,
               -1.000, 0.000, -0.000
            ])
         },
         uv: {
            itemSize: 2,
            array: new Float32Array([
               1.000, 0.880,
               0.000, 0.124,
               0.000, 0.880,
               0.000, 0.124,
               1.000, 0.880,
               1.000, 0.124,
               1.000, 0.880,
               0.001, 0.917,
               0.001, 0.087,
               1.000, 0.880,
               0.001, 0.087,
               1.000, 0.124,
               0.000, 0.880,
               0.000, 0.124,
               0.001, 0.087,
               0.000, 0.880,
               0.001, 0.087,
               0.001, 0.917
            ])
         }
         };

         material = new THREE.MeshBasicMaterial({
            side: THREE.FrontSide,
            map: THREE.ImageUtils.loadTexture('data_BODYHULL.jpg')
            });
         mesh = new THREE.Mesh(geometry, material);
         scene.add(mesh);

         geometry = new THREE.BufferGeometry();
         geometry.attributes = {
         position: {
            itemSize: 3,
            array: new Float32Array([
            -304.285, 7371.533, -6264.580,
            549.082, 6339.343, -6178.465,
            -304.295, 6339.343, -6178.465,
            549.093, 7371.533, -6264.580,
            549.082, 6339.343, -6178.465,
               -304.285, 7371.533, -6264.580
            ])
         },
         normal: {
            itemSize: 3,
            array: new Float32Array([
            0.000, -0.000, -1.000,
            0.000, -0.000, -1.000,
            0.000, -0.000, -1.000,
            0.000, -0.000, -1.000,
            0.000, -0.000, -1.000,
               0.000, -0.000, -1.000
            ])
         },
         uv: {
            itemSize: 2,
            array: new Float32Array([
               0.049, 0.955,
               0.951, 0.858,
               0.049, 0.858,
               0.951, 0.955,
               0.951, 0.858,
               0.049, 0.955
            ])
         }
         };

         material = new THREE.MeshBasicMaterial({
            side: THREE.FrontSide,
            map: THREE.ImageUtils.loadTexture('data_BODYHULL.jpg')
            });
         mesh = new THREE.Mesh(geometry, material);
         scene.add(mesh);

}
